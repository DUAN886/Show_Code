import os
import json
import cv2
import numpy as np
from detectron2.engine import DefaultTrainer, DefaultPredictor
from detectron2.config import get_cfg
from detectron2.data.datasets import register_coco_instances
from detectron2.evaluation import COCOEvaluator
from detectron2.model_zoo import get_checkpoint_url
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog

# Labelme JSON 转 COCO 格式

def labelme_to_coco(labelme_folder, output_file, categories):
    """
    将 Labelme 标注转换为 COCO 格式。
    :param labelme_folder: Labelme 标注文件夹路径
    :param output_file: 输出 COCO 格式文件路径
    :param categories: 类别列表
    """
    coco = {
        "images": [],
        "annotations": [],
        "categories": []
    }
    annotation_id = 1
    for i, category in enumerate(categories):
        coco["categories"].append({
            "id": i + 1,
            "name": category,
            "supercategory": "defect"
        })

    for image_id, label_file in enumerate(os.listdir(labelme_folder)):
        if not label_file.endswith(".json"):
            continue
        label_path = os.path.join(labelme_folder, label_file)
        with open(label_path, "r") as f:
            data = json.load(f)

        # 添加图像信息
        coco["images"].append({
            "id": image_id,
            "file_name": data["imagePath"],
            "height": data["imageHeight"],
            "width": data["imageWidth"]
        })

        # 添加标注信息
        for shape in data["shapes"]:
            points = np.array(shape["points"], dtype=np.int32)
            x, y, w, h = cv2.boundingRect(points)
            area = w * h
            segmentation = np.array(points).flatten().tolist()

            coco["annotations"].append({
                "id": annotation_id,
                "image_id": image_id,
                "category_id": categories.index(shape["label"]) + 1,
                "bbox": [x, y, w, h],
                "area": area,
                "segmentation": [segmentation],
                "iscrowd": 0
            })
            annotation_id += 1

    # 保存 COCO 格式文件
    with open(output_file, "w") as f:
        json.dump(coco, f, indent=4)
    print(f"COCO 格式文件已保存到: {output_file}")

# 注册数据集
def register_datasets(train_json, val_json, train_images, val_images):
    register_coco_instances("car_paint_train", {}, train_json, train_images)
    register_coco_instances("car_paint_val", {}, val_json, val_images)

# 配置 Mask R-CNN

def configure_model(output_dir, num_classes):
    cfg = get_cfg()
    cfg.merge_from_file(get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
    cfg.DATASETS.TRAIN = ("car_paint_train",)
    cfg.DATASETS.TEST = ("car_paint_val",)
    cfg.DATALOADER.NUM_WORKERS = 4
    cfg.MODEL.WEIGHTS = get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
    cfg.SOLVER.IMS_PER_BATCH = 2
    cfg.SOLVER.BASE_LR = 0.001
    cfg.SOLVER.MAX_ITER = 10000
    cfg.SOLVER.STEPS = [3000, 6000]
    cfg.MODEL.ROI_HEADS.NUM_CLASSES = num_classes
    cfg.OUTPUT_DIR = output_dir
    cfg.TEST.AUG.ENABLED = True  # 启用多尺度推理
    return cfg

# 训练模型
def train_model(cfg):
    os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
    trainer = DefaultTrainer(cfg)
    trainer.resume_or_load(resume=False)
    trainer.train()

# 推理与后处理
def inference_and_postprocess(cfg, image_folder, output_folder, iou_threshold=0.5, min_area=50):
    predictor = DefaultPredictor(cfg)
    os.makedirs(output_folder, exist_ok=True)
    for image_file in os.listdir(image_folder):
        image_path = os.path.join(image_folder, image_file)
        image = cv2.imread(image_path)
        outputs = predictor(image)

        # NMS 后处理
        instances = outputs["instances"].to("cpu")
        boxes = instances.pred_boxes.tensor.numpy()
        scores = instances.scores.numpy()
        classes = instances.pred_classes.numpy()

        # 过滤小面积预测
        filtered_boxes = []
        for i, box in enumerate(boxes):
            x1, y1, x2, y2 = box
            area = (x2 - x1) * (y2 - y1)
            if area >= min_area and scores[i] >= iou_threshold:
                filtered_boxes.append((box, scores[i], classes[i]))

        # 保存结果
        output_path = os.path.join(output_folder, image_file)
        for box, score, cls in filtered_boxes:
            x1, y1, x2, y2 = map(int, box)
            cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(image, f"{cls}: {score:.2f}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
        cv2.imwrite(output_path, image)

# 评估模型
def evaluate_model(cfg):
    evaluator = COCOEvaluator("car_paint_val", cfg, False, output_dir=cfg.OUTPUT_DIR)
    trainer = DefaultTrainer(cfg)
    trainer.test(cfg, evaluator)

# 主动学习策略
def active_learning(cfg, entropy_threshold=0.5):
    # 示例：选择预测熵最高的样本
    pass  # 可扩展实现

# 示例使用
if __name__ == "__main__":
    categories = ["流挂", "橘皮", "颗粒", "缩孔", "砂纸痕扩张", "划痕", "鼓泡"]
    labelme_to_coco("labelme_annotations", "train_coco.json", categories)
    register_datasets("train_coco.json", "val_coco.json", "train_images", "val_images")
    cfg = configure_model("output", len(categories))
    train_model(cfg)
    inference_and_postprocess(cfg, "test_images", "results")
    evaluate_model(cfg)
